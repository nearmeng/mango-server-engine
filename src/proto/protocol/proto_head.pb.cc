// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_head.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_head.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CS_HEAD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_HEAD_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_HEAD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_HEAD_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fhead_2eproto() {
  protobuf_AddDesc_proto_5fhead_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_head.proto");
  GOOGLE_CHECK(file != NULL);
  CS_HEAD_descriptor_ = file->message_type(0);
  static const int CS_HEAD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEAD, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEAD, seqid_),
  };
  CS_HEAD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_HEAD_descriptor_,
      CS_HEAD::default_instance_,
      CS_HEAD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEAD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEAD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_HEAD));
  SC_HEAD_descriptor_ = file->message_type(1);
  static const int SC_HEAD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEAD, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEAD, seqid_),
  };
  SC_HEAD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_HEAD_descriptor_,
      SC_HEAD::default_instance_,
      SC_HEAD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEAD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEAD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_HEAD));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fhead_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_HEAD_descriptor_, &CS_HEAD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_HEAD_descriptor_, &SC_HEAD::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fhead_2eproto() {
  delete CS_HEAD::default_instance_;
  delete CS_HEAD_reflection_;
  delete SC_HEAD::default_instance_;
  delete SC_HEAD_reflection_;
}

void protobuf_AddDesc_proto_5fhead_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  static const char descriptor[] = {  "\n\020proto_head.proto\"\'\n\007CS_HEAD\022\r\n\005msgid\030\001"
      " \002(\005\022\r\n\005seqid\030\002 \001(\005\"\'\n\007SC_HEAD\022\r\n\005msgid\030"
      "\001 \002(\005\022\r\n\005seqid\030\002 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(    descriptor, 100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_head.proto", &protobuf_RegisterTypes);
  CS_HEAD::default_instance_ = new CS_HEAD();
  SC_HEAD::default_instance_ = new SC_HEAD();
  CS_HEAD::default_instance_->InitAsDefaultInstance();
  SC_HEAD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fhead_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fhead_2eproto {
  StaticDescriptorInitializer_proto_5fhead_2eproto() {
    protobuf_AddDesc_proto_5fhead_2eproto();
  }
} static_descriptor_initializer_proto_5fhead_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CS_HEAD::kMsgidFieldNumber;
const int CS_HEAD::kSeqidFieldNumber;
#endif  // !_MSC_VER

CS_HEAD::CS_HEAD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_HEAD)
}

void CS_HEAD::InitAsDefaultInstance() {
}

CS_HEAD::CS_HEAD(const CS_HEAD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_HEAD)
}

void CS_HEAD::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  seqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_HEAD::~CS_HEAD() {
  // @@protoc_insertion_point(destructor:CS_HEAD)
  SharedDtor();
}

void CS_HEAD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_HEAD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_HEAD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_HEAD_descriptor_;
}

const CS_HEAD& CS_HEAD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fhead_2eproto();
  return *default_instance_;
}

CS_HEAD* CS_HEAD::default_instance_ = NULL;

CS_HEAD* CS_HEAD::New() const {
  return new CS_HEAD;
}

void CS_HEAD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CS_HEAD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(msgid_, seqid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_HEAD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_HEAD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seqid;
        break;
      }

      // optional int32 seqid = 2;
      case 2: {
        if (tag == 16) {
         parse_seqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_HEAD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_HEAD)
  return false;
#undef DO_
}

void CS_HEAD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_HEAD)
  // required int32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional int32 seqid = 2;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_HEAD)
}

::google::protobuf::uint8* CS_HEAD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_HEAD)
  // required int32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional int32 seqid = 2;
  if (has_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_HEAD)
  return target;
}

int CS_HEAD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional int32 seqid = 2;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_HEAD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_HEAD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_HEAD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_HEAD::MergeFrom(const CS_HEAD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_HEAD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_HEAD::CopyFrom(const CS_HEAD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_HEAD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_HEAD::Swap(CS_HEAD* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seqid_, other->seqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_HEAD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_HEAD_descriptor_;
  metadata.reflection = CS_HEAD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_HEAD::kMsgidFieldNumber;
const int SC_HEAD::kSeqidFieldNumber;
#endif  // !_MSC_VER

SC_HEAD::SC_HEAD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HEAD)
}

void SC_HEAD::InitAsDefaultInstance() {
}

SC_HEAD::SC_HEAD(const SC_HEAD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_HEAD)
}

void SC_HEAD::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  seqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_HEAD::~SC_HEAD() {
  // @@protoc_insertion_point(destructor:SC_HEAD)
  SharedDtor();
}

void SC_HEAD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_HEAD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HEAD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_HEAD_descriptor_;
}

const SC_HEAD& SC_HEAD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fhead_2eproto();
  return *default_instance_;
}

SC_HEAD* SC_HEAD::default_instance_ = NULL;

SC_HEAD* SC_HEAD::New() const {
  return new SC_HEAD;
}

void SC_HEAD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SC_HEAD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(msgid_, seqid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_HEAD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HEAD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seqid;
        break;
      }

      // optional int32 seqid = 2;
      case 2: {
        if (tag == 16) {
         parse_seqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HEAD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HEAD)
  return false;
#undef DO_
}

void SC_HEAD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HEAD)
  // required int32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional int32 seqid = 2;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HEAD)
}

::google::protobuf::uint8* SC_HEAD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HEAD)
  // required int32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional int32 seqid = 2;
  if (has_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HEAD)
  return target;
}

int SC_HEAD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional int32 seqid = 2;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HEAD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_HEAD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_HEAD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_HEAD::MergeFrom(const SC_HEAD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_HEAD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HEAD::CopyFrom(const SC_HEAD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HEAD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_HEAD::Swap(SC_HEAD* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seqid_, other->seqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_HEAD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_HEAD_descriptor_;
  metadata.reflection = SC_HEAD_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
