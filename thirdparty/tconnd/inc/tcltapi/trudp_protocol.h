/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TRUDP_PROTOCOL_H_
#define TRUDP_PROTOCOL_H_


#ifndef TDR_METALIB_TRUDP_VERSION 
#define TDR_METALIB_TRUDP_VERSION 	1 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TRUDP_HASH 
#define TDR_METALIB_TRUDP_HASH 	"57b3c0e24110b2664d58f0ddef2466fb" /*hash of metalib*/
#endif

/*   Define c types.   */
#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
    #include <stddef.h>
    #include <time.h>
    #include <sys/types.h>

    #if !defined(_WIN32) && !defined(_WIN64)

        #include <stdint.h>
        #include <inttypes.h>

    #else /*if !defined(_WIN32) && !defined(_WIN64)*/

        //The stdint declaras
        typedef  signed char  int8_t;
        typedef  short int16_t;
        typedef  int   int32_t;
        typedef unsigned char  uint8_t;
        typedef unsigned short uint16_t;
        typedef unsigned int   uint32_t;
        #if _MSC_VER >= 1300
            typedef unsigned long long 	uint64_t;
            typedef long long 	int64_t;
        #else /* _MSC_VER */
            typedef unsigned __int64	uint64_t;
            typedef __int64	int64_t;
        #endif /* _MSC_VER */

    #endif /*if !defined(_WIN32) && !defined(_WIN64)*/

    typedef int64_t tdr_longlong;
    typedef uint64_t tdr_ulonglong;
    typedef uint16_t tdr_wchar_t;  /**<Wchar基本数据类型*/
    typedef uint32_t tdr_date_t;	/**<data基本数据类型*/
    typedef uint32_t tdr_time_t;	/**<time基本数据类型*/
    typedef uint64_t tdr_datetime_t; /**<datetime基本数据类型*/
    typedef uint32_t tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/


/*   User defined includes.   */


/*   User defined macros.   */
#define TRUDP_MAGIC                                      	102 	/* the reliable udp protocol magic number */
#define TRUDP_MAX_BODY_LEN                               	32768 	/* the maximal size of  a data message */
#define TRUDP_MAX_DATAGRAM_COUNT                         	5 	/* the maximal count of datagram in a rudp packet */
#define TRUDP_MAX_DATAGRAM_LEN                           	4096 	/* the maximal size of  a datagram */
#define TRUDP_MAX_SACK_COUNT                             	5 	/* the maximal size of  sackinfo count */

/* TRUDP_CMD*/
enum tagTRUDP_CMD 
{
    TRUDP_CMD_SYN = 1, 	/* syn packet */
    TRUDP_CMD_SYNACK = 2, 	/* syn ack packet */
    TRUDP_CMD_STOP = 3, 	/* stop packet */
    TRUDP_CMD_ACK = 4, 	/* data ack packet */
    TRUDP_CMD_DATA = 16, 	/* data packet */
};

/* TRUDP_FLAG*/
enum tagTRUDP_FLAG 
{
    TRUDP_ACK_FLAG = 1, 	/* packet with min ack sequence */
    TRUDP_SESSION_FLAG = 2, 	/* packet with session id */
    TRUDP_RELIABLE_FLAG = 4, 	/* reliable packet */
    TRUDP_ENCRYPTION_FLAG = 8, 	/* packet with encryption,reserve */
};

/* TRUDP_STOP_REASON*/
enum tagTRUDP_STOP_REASON 
{
    TRUDP_REASON_IDLE_CLOSE = 1, 	/* the client or server close connection by idle timeout */
    TRUDP_REASON_PEER_CLOSE = 2, 	/* the peer closes connection actively */
    TFRAMEHEAD_REASON_EXCEED_LIMIT = 5, 	/* the speed client sends packet exceed the max. value */
    TFRAMEHEAD_REASON_TCONND_SHUTDOWN = 6, 	/* tconnd shutdown */
    TRUDP_REASON_SELF_CLOSE = 7, 	/* the GS occurs wrong and close connection actively */
    TRUDP_REASON_REACH_LIMIT = 100, 	/* the number of connection exceeds maximum */
    TRUDP_REASON_INIT_HANDLER_FAIL = 101, 	/* tconnd fails to initialize service hander */
    TRUDP_REASON_NO_SESSION = 1000, 	/* tconnd doesn't keep session for the client */
};


/*   Structs/unions prototype.   */
struct tagTRUDPSyn;
typedef struct tagTRUDPSyn                                         	TRUDPSYN;
typedef struct tagTRUDPSyn                                         	*LPTRUDPSYN;

struct tagTRUDPSynAck;
typedef struct tagTRUDPSynAck                                      	TRUDPSYNACK;
typedef struct tagTRUDPSynAck                                      	*LPTRUDPSYNACK;

struct tagTRUDPStop;
typedef struct tagTRUDPStop                                        	TRUDPSTOP;
typedef struct tagTRUDPStop                                        	*LPTRUDPSTOP;

struct tagTRUDPSackInfo;
typedef struct tagTRUDPSackInfo                                    	TRUDPSACKINFO;
typedef struct tagTRUDPSackInfo                                    	*LPTRUDPSACKINFO;

struct tagTRUDPAck;
typedef struct tagTRUDPAck                                         	TRUDPACK;
typedef struct tagTRUDPAck                                         	*LPTRUDPACK;

struct tagTRUDPDataInfo;
typedef struct tagTRUDPDataInfo                                    	TRUDPDATAINFO;
typedef struct tagTRUDPDataInfo                                    	*LPTRUDPDATAINFO;

struct tagTRUDPData;
typedef struct tagTRUDPData                                        	TRUDPDATA;
typedef struct tagTRUDPData                                        	*LPTRUDPDATA;

struct tagTRUDPOption;
typedef struct tagTRUDPOption                                      	TRUDPOPTION;
typedef struct tagTRUDPOption                                      	*LPTRUDPOPTION;

struct tagTRUDPHead;
typedef struct tagTRUDPHead                                        	TRUDPHEAD;
typedef struct tagTRUDPHead                                        	*LPTRUDPHEAD;

struct tagTRUDPBody;
typedef struct tagTRUDPBody                                        	TRUDPBODY;
typedef struct tagTRUDPBody                                        	*LPTRUDPBODY;

union tagTRUDPCmdBody;
typedef union  tagTRUDPCmdBody                                     	TRUDPCMDBODY;
typedef union  tagTRUDPCmdBody                                     	*LPTRUDPCMDBODY;

struct tagTRUDPFrame;
typedef struct tagTRUDPFrame                                       	TRUDPFRAME;
typedef struct tagTRUDPFrame                                       	*LPTRUDPFRAME;

/*   Define structs/unions.   */
#pragma pack(1)

/* syn packet */
struct tagTRUDPSyn
{
    uint32_t dwUserId;                                	/*   user identify, for example QQ number,Optional */
    int32_t iInitialSeq;                              	/*   data packet sequence */
};

/* syn ack */
struct tagTRUDPSynAck
{
    int32_t iUpRetransTimeOut;                        	/*   re-transmit timeout for up packet, Reserved */
    int32_t iDownRetransTimeOut;                      	/*   re-transmit timeout for down packet,unit(ms) */
    int32_t iIdleTimeOut;                             	/*   connection idle timeout,unit(ms), Reserved */
    int32_t iInitialSeq;                              	/*   data packet sequence */
    int32_t iSessionId;                               	/*   session id */
};

/* stop packet */
struct tagTRUDPStop
{
    int32_t iReason;                                  	/*   stop reason */
};

/* Sack Info */
struct tagTRUDPSackInfo
{
    int32_t iSackBegin;                               	/*   sack begin sequence */
    int32_t iSackEnd;                                 	/*   sack end sequence */
};

/* data ack packet */
struct tagTRUDPAck
{
    int32_t iAckSeqId;                                	/*   acknowledged  sequence */
    uint16_t wSackCount;                              	/*   sack count */
    TRUDPSACKINFO astSackInfo[TRUDP_MAX_SACK_COUNT];  	/*   sack info */
};

struct tagTRUDPDataInfo
{
    int32_t iDataSeq;                                 	/*   the sequence of data packet, only valid for reliable packet */
    uint16_t wDataLen;                                	/*   the length of data packet */
    uint8_t szDataBuff[TRUDP_MAX_DATAGRAM_LEN];      
};

/* data packet */
struct tagTRUDPData
{
    uint16_t wDataCount;                              	/*   data packet count */
    TRUDPDATAINFO astDataInfo[TRUDP_MAX_DATAGRAM_COUNT];
};

/* Optional Data */
struct tagTRUDPOption
{
    int32_t iAckNum;                                 
    int32_t iSessionId;                              
};

/* packet head */
struct tagTRUDPHead
{
    uint8_t bMagic;                                   	/*   magic number */
    uint8_t bVersion;                                 	/*   protocol version */
    uint8_t bCmd;                                     	/*   packet type */
    uint8_t bOptionFlag;                              	/*   option flag */
};

struct tagTRUDPBody
{
    uint16_t wBodyLen;                               
    uint8_t szBodyBuff[TRUDP_MAX_BODY_LEN];          
};

/* packet body */
union tagTRUDPCmdBody
{
    TRUDPSYN stSyn;                                   	/* TRUDP_CMD_SYN,   */
    TRUDPSYNACK stSynAck;                             	/* TRUDP_CMD_SYNACK,   */
    TRUDPSTOP stStop;                                 	/* TRUDP_CMD_STOP,   */
    TRUDPACK stAck;                                   	/* TRUDP_CMD_ACK,   */
    TRUDPDATA stData;                                 	/* TRUDP_CMD_DATA,   */
};

/* reliable udp packet */
struct tagTRUDPFrame
{
    TRUDPHEAD stHead;                                 	/*   fixed head data */
    TRUDPOPTION stHeadOption;                         	/*   optional head data */
    TRUDPBODY stBody;                                
};

#pragma pack()


#endif /* TRUDP_PROTOCOL_H_ */
