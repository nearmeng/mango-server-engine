/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TPDUDEF_H_
#define TPDUDEF_H_


#ifndef TDR_METALIB_TQQAPI_VERSION 
#define TDR_METALIB_TQQAPI_VERSION 	15 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TQQAPI_HASH 
#define TDR_METALIB_TQQAPI_HASH 	"991b4c6ff3352a132816926c6a0eb232" /*hash of metalib*/
#endif

/*   Define c types.   */
#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
    #include <stddef.h>
    #include <time.h>
    #include <sys/types.h>

    #if !defined(_WIN32) && !defined(_WIN64)

        #include <stdint.h>
        #include <inttypes.h>

    #else /*if !defined(_WIN32) && !defined(_WIN64)*/

        //The stdint declaras
        typedef  signed char  int8_t;
        typedef  short int16_t;
        typedef  int   int32_t;
        typedef unsigned char  uint8_t;
        typedef unsigned short uint16_t;
        typedef unsigned int   uint32_t;
        #if _MSC_VER >= 1300
            typedef unsigned long long 	uint64_t;
            typedef long long 	int64_t;
        #else /* _MSC_VER */
            typedef unsigned __int64	uint64_t;
            typedef __int64	int64_t;
        #endif /* _MSC_VER */

    #endif /*if !defined(_WIN32) && !defined(_WIN64)*/

    typedef int64_t tdr_longlong;
    typedef uint64_t tdr_ulonglong;
    typedef uint16_t tdr_wchar_t;  /**<Wchar基本数据类型*/
    typedef uint32_t tdr_date_t;	/**<data基本数据类型*/
    typedef uint32_t tdr_time_t;	/**<time基本数据类型*/
    typedef uint64_t tdr_datetime_t; /**<datetime基本数据类型*/
    typedef uint32_t tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/


/*   User defined includes.   */
#include "tconnsecdef.h"
#include "tqqdef.h"


/*   User defined macros.   */
#define TPDU_MAX_ENCRYPTSKEY_LEN                         	128
#define TPDU_MAX_ENCRYPTIDENT_LEN                        	64
#define TPDU_MAX_ENCRYPTSYN_LEN                          	128
#define TPDU_MAX_ENCRYPTSYNACK_LEN                       	128
#define TPDU_MAX_MIBAOBUFFER_LEN                         	4096
#define TPDU_MAGIC                                       	85 	/* 协议magic */
#define TPDU_VERSION                                     	15 	/* 客户端协议版本 */

/* TPDU_CMD*/
enum tagTPDU_CMD 
{
    TPDU_CMD_NONE = 0, 	/* 通信包 */
    TPDU_CMD_CHGSKEY = 1, 	/* 交换密钥(下行) */
    TPDU_CMD_QUEINFO = 2, 	/* 排队信息(下行) */
    TPDU_CMD_AUTH = 3, 	/* 签名请求信息(上行) */
    TPDU_CMD_IDENT = 4, 	/* 连接建立(下行) */
    TPDU_CMD_PLAIN = 5, 	/* 未加密通信包(下行) */
    TPDU_CMD_RELAY = 6, 	/* 重连请求信息(上行) */
    TPDU_CMD_STOP = 7, 	/* 服务器断开连接下发错误码 */
    TPDU_CMD_SYN = 8, 	/* 连接握手信息(下行) */
    TPDU_CMD_SYNACK = 9, 	/* 三次握手请求(上行) */
    TPDU_CMD_MBA_QUERYRSP = 10, 	/* 查询密保返回结果(下行) */
    TPDU_CMD_MBA_VERIFYREQ = 11, 	/* 验证密保请求(上行) */
    TPDU_CMD_MBA_VERIFYRSP = 12, 	/* 下发密保问题检验结果(下行) */
    TPDU_CMD_CLOSE = 13, 	/* 客户端关闭连接通知消息(上行) */
    TPDU_CMD_CLIENT_ADDR = 210, 	/* TGC发送的客户端真实地址消息(上行) */
};

/* TPDU_RELAY_TYPE*/
enum tagTPDU_RELAY_TYPE 
{
    TPDU_JUMP_SERVER_RELAY = 1, 	/* 跨服跳转 */
    TPDU_NETWORK_FAILURE_RELAY = 2, 	/* 断线重连 */
    TPDU_CLIENT_CRASH_RELAY = 3, 	/* 保留值 */
};

/* TPDU_CLIENT_TYPE*/
enum tagTPDU_CLIENT_TYPE 
{
    TPDU_CLIENT_TYPE_PC = 0, 	/* PC客户端 */
    TPDU_CLIENT_TYPE_MOBILE = 1, 	/* 移动终端 */
};

/* TPDU_STOP_REASON*/
enum tagTPDU_STOP_REASON 
{
    TPDU_REASON_NONE = 0, 	/* success */
    TPDU_REASON_IDLE_CLOSE = 1, 	/* 连接空闲关闭 */
    TPDU_REASON_PEER_CLOSE = 2, 	/* 客户端主动关闭 */
    TPDU_REASON_BAD_PKGLEN = 4, 	/* 请求包长度异常关闭 */
    TPDU_REASON_EXCEED_LIMIT = 5, 	/* 客户端发送速度超过限制 */
    TPDU_REASON_SELF_CLOSE = 7, 	/* 逻辑服务器主动下发关闭 */
    TPDU_REASON_AUTH_FAIL = 8, 	/* 客户端连接签名验证失败 */
    TPDU_REASON_REASON_SYNACK_FAIL = 9, 	/* 客户端三次握手验证失败 */
    TPDU_REASON_SEQUENCE_INVALID = 11, 	/* 上行包序列号非法 */
    TPDU_REASON_RELAY_FAIL = 14, 	/* 客户端重连失败 */
    TPDU_REASON_MBA_FAIL = 15, 	/* 密保处理失败 */
    TPDU_REASON_MBA_TIMEOUT = 16, 	/* 密保返回应答超时 */
    TPDU_REASON_UNPACK_FAIL = 17, 	/* tconnd 客户端协议解码失败 */
    TPDU_REASON_INVALID_PKG = 18, 	/* 数据包非法 */
    TPDU_REASON_REACH_LIMIT = 100, 	/* 连接已达到服务器允许上限 */
    TPDU_REASON_INIT_HANDLER_FAIL = 101, 	/* 初始化处理句柄失败 */
};


/*   Structs/unions prototype.   */
struct tagTPDUExtChgSkey;
typedef struct tagTPDUExtChgSkey                                   	TPDUEXTCHGSKEY;
typedef struct tagTPDUExtChgSkey                                   	*LPTPDUEXTCHGSKEY;

struct tagTPDUExtQueInfo;
typedef struct tagTPDUExtQueInfo                                   	TPDUEXTQUEINFO;
typedef struct tagTPDUExtQueInfo                                   	*LPTPDUEXTQUEINFO;

union tagTPDUExtAuthData;
typedef union  tagTPDUExtAuthData                                  	TPDUEXTAUTHDATA;
typedef union  tagTPDUExtAuthData                                  	*LPTPDUEXTAUTHDATA;

struct tagTPDUExtAuthInfo;
typedef struct tagTPDUExtAuthInfo                                  	TPDUEXTAUTHINFO;
typedef struct tagTPDUExtAuthInfo                                  	*LPTPDUEXTAUTHINFO;

struct tagTPDUIdentInfo;
typedef struct tagTPDUIdentInfo                                    	TPDUIDENTINFO;
typedef struct tagTPDUIdentInfo                                    	*LPTPDUIDENTINFO;

struct tagTPDUExtIdent;
typedef struct tagTPDUExtIdent                                     	TPDUEXTIDENT;
typedef struct tagTPDUExtIdent                                     	*LPTPDUEXTIDENT;

struct tagTPDUExtRelay;
typedef struct tagTPDUExtRelay                                     	TPDUEXTRELAY;
typedef struct tagTPDUExtRelay                                     	*LPTPDUEXTRELAY;

struct tagTPDUExtStop;
typedef struct tagTPDUExtStop                                      	TPDUEXTSTOP;
typedef struct tagTPDUExtStop                                      	*LPTPDUEXTSTOP;

struct tagTPDUSynInfo;
typedef struct tagTPDUSynInfo                                      	TPDUSYNINFO;
typedef struct tagTPDUSynInfo                                      	*LPTPDUSYNINFO;

struct tagTPDUExtSyn;
typedef struct tagTPDUExtSyn                                       	TPDUEXTSYN;
typedef struct tagTPDUExtSyn                                       	*LPTPDUEXTSYN;

struct tagTPDUExtSynAck;
typedef struct tagTPDUExtSynAck                                    	TPDUEXTSYNACK;
typedef struct tagTPDUExtSynAck                                    	*LPTPDUEXTSYNACK;

struct tagTPDUExtMiBao;
typedef struct tagTPDUExtMiBao                                     	TPDUEXTMIBAO;
typedef struct tagTPDUExtMiBao                                     	*LPTPDUEXTMIBAO;

struct tagTPDUExtClientAddr;
typedef struct tagTPDUExtClientAddr                                	TPDUEXTCLIENTADDR;
typedef struct tagTPDUExtClientAddr                                	*LPTPDUEXTCLIENTADDR;

union tagTPDUExt;
typedef union  tagTPDUExt                                          	TPDUEXT;
typedef union  tagTPDUExt                                          	*LPTPDUEXT;

struct tagTPDUBase_Old;
typedef struct tagTPDUBase_Old                                     	TPDUBASE_OLD;
typedef struct tagTPDUBase_Old                                     	*LPTPDUBASE_OLD;

struct tagTPDUBase;
typedef struct tagTPDUBase                                         	TPDUBASE;
typedef struct tagTPDUBase                                         	*LPTPDUBASE;

struct tagTPDUHead_Old;
typedef struct tagTPDUHead_Old                                     	TPDUHEAD_OLD;
typedef struct tagTPDUHead_Old                                     	*LPTPDUHEAD_OLD;

struct tagTPDUHead;
typedef struct tagTPDUHead                                         	TPDUHEAD;
typedef struct tagTPDUHead                                         	*LPTPDUHEAD;

struct tagTPDUEncHead;
typedef struct tagTPDUEncHead                                      	TPDUENCHEAD;
typedef struct tagTPDUEncHead                                      	*LPTPDUENCHEAD;

struct tagTPDUFrame;
typedef struct tagTPDUFrame                                        	TPDUFRAME;
typedef struct tagTPDUFrame                                        	*LPTPDUFRAME;

/*   Define structs/unions.   */
#pragma pack(1)

/* 交换密钥 */
struct tagTPDUExtChgSkey
{
    int16_t nType;                                    	/*   默认填零 */
    int16_t nLen;                                     	/*   密钥长度(密文),明文为16字节密钥 */
    int8_t szEncryptSkey[TPDU_MAX_ENCRYPTSKEY_LEN];  
};

/* 排队信息 */
struct tagTPDUExtQueInfo
{
    int32_t iPos;                                     	/*   在队列中位置 */
    int32_t iMax;                                     	/*   队列的长度 */
    int32_t iWaitTime;                                	/*  Ver.13 预计排队等待时间,单位秒 */
};

/* 签名数据 */
union tagTPDUExtAuthData
{
    TQQAUTHINFO stAuthQQV1;                           	/* TCONN_SEC_AUTH_QQV1,  0x82协议 */
    TQQAUTHINFO stAuthQQV2;                           	/* TCONN_SEC_AUTH_QQV2,  0x82协议 */
    TQQUNIFIEDAUTHINFO stAuthQQUnified;               	/* TCONN_SEC_AUTH_QQUNIFIED,  0XDE协议 */
    TAPAUTHINFO stAuthAP;                             	/* TCONN_SEC_AUTH_AP,  0X66协议，与0XDE共用鉴权协议 */
};

/* 签名请求包 */
struct tagTPDUExtAuthInfo
{
    int32_t iEncMethod;                               	/*  Ver.11 通信加解密类型 Bind Macrosgroup:TCONN_SEC_ENC,*/
    int32_t iServiceID;                               	/*  Ver.12 游戏ID  */
    int32_t iAuthType;                                	/*   签名类型 Bind Macrosgroup:TCONN_SEC_AUTH,*/
    TPDUEXTAUTHDATA stAuthData;                       	/*   签名数据,数据参考TPDUExtAuthData */
    int32_t iClientType;                              	/*  Ver.15 终端类型,0表示PC客户端，1表示移动终端  Bind Macrosgroup:TPDU_CLIENT_TYPE,*/
};

/* 连接建立包 */
struct tagTPDUIdentInfo
{
    int32_t iPos;                                     	/*   连接索引和验证字符串可以保存为以后的重连 */
    char szIdent[TQQ_IDENT_LEN];                      	/*   连接验证字符串 */
};

struct tagTPDUExtIdent
{
    int32_t iLen;                                     	/*   连接建立包信息长度(密文),结构参考TPDUIdentInfo */
    int8_t szEncryptIdent[TPDU_MAX_ENCRYPTIDENT_LEN];
};

/* 重连请求包 */
struct tagTPDUExtRelay
{
    int32_t iEncMethod;                               	/*  Ver.11 通信加解密类型 Bind Macrosgroup:TCONN_SEC_ENC,*/
    int32_t iRelayType;                               	/*   重连类型 Bind Macrosgroup:TPDU_RELAY_TYPE,*/
    int32_t iOldPos;                                  	/*   占位连接索引 */
    int32_t iLen;                                     	/*   重连验证信息长度(密文),结构参考TQQUserIdent */
    int8_t szEncryptIdent[TPDU_MAX_ENCRYPTIDENT_LEN];
};

/* 保留,暂未用 */
struct tagTPDUExtStop
{
    int32_t iStopReason;                             
};

/* 连接握手信息 */
struct tagTPDUSynInfo
{
    char szRandstr[TQQ_IDENT_LEN];                   
};

struct tagTPDUExtSyn
{
    uint8_t bLen;                                     	/*   连接握手信息长度(密文),结构参考TPDUSynInfo */
    int8_t szEncryptSynInfo[TPDU_MAX_ENCRYPTSYN_LEN];
};

/* 三次握手请求信息 */
struct tagTPDUExtSynAck
{
    uint8_t bLen;                                     	/*   握手请求信息长度(密文),结构同TPDUSynInfo */
    uint8_t szEncryptSynInfo[TPDU_MAX_ENCRYPTSYNACK_LEN];
};

/* 密保相关透传buffer,密文 */
struct tagTPDUExtMiBao
{
    uint16_t wLen;                                    	/*   buffer长度 */
    uint8_t szMiBaoBuffer[TPDU_MAX_MIBAOBUFFER_LEN]; 
};

/* 客户端真实地址信息 */
struct tagTPDUExtClientAddr
{
    uint32_t dwUin;                                   	/*   Uin */
    uint32_t dwIP;                                    	/*   IP地址 */
    uint16_t wPort;                                   	/*   端口 */
    char szExtInfo[128];                              	/*   附加信息 */
};

/* 包头扩展信息 */
union tagTPDUExt
{
    TPDUEXTCHGSKEY stChgSkey;                         	/* TPDU_CMD_CHGSKEY,   */
    TPDUEXTQUEINFO stQueInfo;                         	/* TPDU_CMD_QUEINFO,   */
    TPDUEXTAUTHINFO stAuthInfo;                       	/* TPDU_CMD_AUTH,   */
    TPDUEXTIDENT stIdent;                             	/* TPDU_CMD_IDENT,   */
    TPDUEXTRELAY stRelay;                             	/* TPDU_CMD_RELAY,   */
    TPDUEXTSTOP stStop;                               	/* TPDU_CMD_STOP,   */
    TPDUEXTSYN stSyn;                                 	/* TPDU_CMD_SYN,   */
    TPDUEXTSYNACK stSynAck;                           	/* TPDU_CMD_SYNACK,   */
    TPDUEXTMIBAO stMbaQueryRsp;                       	/* TPDU_CMD_MBA_QUERYRSP, Ver.14  */
    TPDUEXTMIBAO stMbaVerifyReq;                      	/* TPDU_CMD_MBA_VERIFYREQ, Ver.14  */
    TPDUEXTMIBAO stMbaVerifyRsp;                      	/* TPDU_CMD_MBA_VERIFYRSP, Ver.14  */
    TPDUEXTCLIENTADDR stClientAddr;                   	/* TPDU_CMD_CLIENT_ADDR, Ver.14  */
};

/* version14之前基础包头信息 */
struct tagTPDUBase_Old
{
    uint8_t bMagic;                                   	/*   魔数,默认为0x55 */
    uint8_t bVersion;                                 	/*   协议版本,参考TPDU_VERSION */
    uint8_t bCmd;                                     	/*   包类型 Bind Macrosgroup:TPDU_CMD,*/
    uint8_t bHeadLen;                                 	/*   包头长度 */
    uint8_t bEncHeadLen;                              	/*  Ver.11 上行包有效,包头附加信息长度,与body一起加密 */
    int32_t iBodyLen;                                 	/*   包体长度 */
};

/* 基础包头信息 */
struct tagTPDUBase
{
    uint8_t bMagic;                                   	/*   魔数,默认为0x55 */
    uint8_t bVersion;                                 	/*   协议版本,参考TPDU_VERSION */
    uint8_t bCmd;                                     	/*   包类型 Bind Macrosgroup:TPDU_CMD,*/
    uint8_t bEncHeadLen;                              	/*  Ver.11 上行包有效,包头附加信息长度,与body一起加密 */
    int32_t iHeadLen;                                 	/*   包头长度 */
    int32_t iBodyLen;                                 	/*   包体长度 */
};

/* version14之前的包头 */
struct tagTPDUHead_Old
{
    TPDUBASE_OLD stBase;                              	/*   基础信息 */
    TPDUEXT stExt;                                    	/*   扩展信息 */
};

/* 包头 */
struct tagTPDUHead
{
    TPDUBASE stBase;                                  	/*   基础信息 */
    TPDUEXT stExt;                                    	/*   扩展信息 */
};

/* 附加头部信息,不要定义字符串或者网络序和本地序不等的数据类型 */
struct tagTPDUEncHead
{
    uint32_t dwSequence;                             
};

/* CS通信包= 明文:包头(基础信息+扩展信息)+密文:包体(附加头部信息+应用包 */
struct tagTPDUFrame
{
    TPDUHEAD stHead;                                 
    int8_t szBody[1];                                
};

#pragma pack()


#endif /* TPDUDEF_H_ */
