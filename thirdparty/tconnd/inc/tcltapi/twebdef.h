/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TWEBDEF_H_
#define TWEBDEF_H_


#ifndef TDR_METALIB_TCONND_WEBDEF_VERSION 
#define TDR_METALIB_TCONND_WEBDEF_VERSION 	1 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TCONND_WEBDEF_HASH 
#define TDR_METALIB_TCONND_WEBDEF_HASH 	"e6f4a7a7c3a5fab41c0afa607b633e66" /*hash of metalib*/
#endif

/*   Define c types.   */
#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
    #include <stddef.h>
    #include <time.h>
    #include <sys/types.h>

    #if !defined(_WIN32) && !defined(_WIN64)

        #include <stdint.h>
        #include <inttypes.h>

    #else /*if !defined(_WIN32) && !defined(_WIN64)*/

        //The stdint declaras
        typedef  signed char  int8_t;
        typedef  short int16_t;
        typedef  int   int32_t;
        typedef unsigned char  uint8_t;
        typedef unsigned short uint16_t;
        typedef unsigned int   uint32_t;
        #if _MSC_VER >= 1300
            typedef unsigned long long 	uint64_t;
            typedef long long 	int64_t;
        #else /* _MSC_VER */
            typedef unsigned __int64	uint64_t;
            typedef __int64	int64_t;
        #endif /* _MSC_VER */

    #endif /*if !defined(_WIN32) && !defined(_WIN64)*/

    typedef int64_t tdr_longlong;
    typedef uint64_t tdr_ulonglong;
    typedef uint16_t tdr_wchar_t;  /**<Wchar基本数据类型*/
    typedef uint32_t tdr_date_t;	/**<data基本数据类型*/
    typedef uint32_t tdr_time_t;	/**<time基本数据类型*/
    typedef uint64_t tdr_datetime_t; /**<datetime基本数据类型*/
    typedef uint32_t tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/


/*   User defined includes.   */


/*   User defined macros.   */
#define TWEB_VERSION                                     	1 	/* WEB客户端协议版本 */
#define TWEB_MAGIC                                       	202 	/* 协议magic，主要用于标识包开头 */
#define TWEB_SKEY_LENGTH                                 	128 	/* SKEY长度 */
#define TWEB_ACCOUNT_LENGTH                              	31 	/* 帐户名称，留了'\0'的位置。 */
#define TWEB_TOKEN_LENGTH                                	201 	/* Token长度，留了一个'\0'的位置。 */
#define TWEB_PASSPORT_LENGTH                             	20 	/* 增值位，20byte */

/* TWEB_USERDATA_TYPE*/
enum tagTWEB_USERDATA_TYPE 
{
    TWEB_USERDATA_UNKNOWN = 0, 	/* 未知状态，用于初始默认值 */
    TWEB_USERDATA_QQSIMPLE = 1, 
    TWEB_USERDATA_COMMON = 2, 
};

/* TWEB_CMD*/
enum tagTWEB_CMD 
{
    TWEB_CMD_STOP = 1, 	/* (下行)连接终止 */
    TWEB_CMD_UPLOAD = 2, 	/* (上行)通用通信包 */
    TWEB_CMD_DOWNLOAD = 3, 	/* (下行)通用通信包，带错误码 */
};

/* TWEB_ERR*/
enum tagTWEB_ERR 
{
    TWEB_ERR_NONE = 0, 	/* success */
    TWEB_ERR_IDLE_CLOSE = 1, 	/* 连接空闲关闭 */
    TWEB_ERR_BAD_PKGLEN = 2, 	/* 请求包长度异常关闭 */
    TWEB_ERR_OVER_FREQ = 3, 	/* 客户端发送速度超过限制 */
    TWEB_ERR_GAMESVR_CLOSE = 4, 	/* 逻辑服务器主动下发关闭 */
    TWEB_ERR_AUTH_FAIL = 5, 	/* 客户端连接鉴权失败，须重新登录 */
    TWEB_ERR_MAX_CONN = 6, 	/* 连接已达到服务器允许上限 */
};
#define TCONND_WAP_MAX_KEY_LENGTH                        	30
#define TCONND_WAP_MAX_VALUE_LENGTH                      	200
#define TCONND_WAP_MAX_URI_LENGTH                        	1024
#define TCONND_WAP_MAX_BODY_LENGTH                       	102400
#define TCONND_WAP_MAX_PARAMS_COUNT                      	20
#define TCONND_WAP_MAX_HEADERS_COUNT                     	20
#define TCONND_WAP_MAX_COOKIES_COUNT                     	20


/*   Structs/unions prototype.   */
struct tagQQUserSim;
typedef struct tagQQUserSim                                        	QQUSERSIM;
typedef struct tagQQUserSim                                        	*LPQQUSERSIM;

struct tagCommUsr;
typedef struct tagCommUsr                                          	COMMUSR;
typedef struct tagCommUsr                                          	*LPCOMMUSR;

union tagWebUserInfo2;
typedef union  tagWebUserInfo2                                     	WEBUSERINFO2;
typedef union  tagWebUserInfo2                                     	*LPWEBUSERINFO2;

struct tagTStopExt;
typedef struct tagTStopExt                                         	TSTOPEXT;
typedef struct tagTStopExt                                         	*LPTSTOPEXT;

union tagTWebExt;
typedef union  tagTWebExt                                          	TWEBEXT;
typedef union  tagTWebExt                                          	*LPTWEBEXT;

struct tagTWebBase;
typedef struct tagTWebBase                                         	TWEBBASE;
typedef struct tagTWebBase                                         	*LPTWEBBASE;

struct tagTWebHead;
typedef struct tagTWebHead                                         	TWEBHEAD;
typedef struct tagTWebHead                                         	*LPTWEBHEAD;

struct tagTWebPkg;
typedef struct tagTWebPkg                                          	TWEBPKG;
typedef struct tagTWebPkg                                          	*LPTWEBPKG;

struct tagTKeyValue;
typedef struct tagTKeyValue                                        	TKEYVALUE;
typedef struct tagTKeyValue                                        	*LPTKEYVALUE;

struct tagTParams;
typedef struct tagTParams                                          	TPARAMS;
typedef struct tagTParams                                          	*LPTPARAMS;

struct tagTHeaders;
typedef struct tagTHeaders                                         	THEADERS;
typedef struct tagTHeaders                                         	*LPTHEADERS;

struct tagTCookies;
typedef struct tagTCookies                                         	TCOOKIES;
typedef struct tagTCookies                                         	*LPTCOOKIES;

struct tagTWapUpload;
typedef struct tagTWapUpload                                       	TWAPUPLOAD;
typedef struct tagTWapUpload                                       	*LPTWAPUPLOAD;

struct tagTWapDownload;
typedef struct tagTWapDownload                                     	TWAPDOWNLOAD;
typedef struct tagTWapDownload                                     	*LPTWAPDOWNLOAD;

/*   Define structs/unions.   */
#pragma pack(1)

/* QQ用户的识别信息，简单版 */
struct tagQQUserSim
{
    uint32_t dwUin;                                   	/*   QQ号 */
    char szSKey[TWEB_SKEY_LENGTH];                    	/*   ptlogin session key */
};

/* 通用的用户的识别信息 */
struct tagCommUsr
{
    uint32_t dwId;                                    	/*   用户身份ID，通常用于系统对接 */
    char szAccount[TWEB_ACCOUNT_LENGTH];              	/*   用户帐户，用于登录 */
    char szToken[TWEB_TOKEN_LENGTH];                  	/*   用户凭据，主要用于验证用户登录状态和身份 */
};

union tagWebUserInfo2
{
    QQUSERSIM stQQUserSimple;                         	/* TWEB_USERDATA_QQSIMPLE,   */
    COMMUSR stCommonUser;                             	/* TWEB_USERDATA_COMMON,   */
};

/* 连接终止(双向) */
struct tagTStopExt
{
    int32_t iReason;                                  	/*   原因 */
};

/* 包头附加信息 */
union tagTWebExt
{
    TSTOPEXT stStopExt;                               	/* TWEB_CMD_STOP,  (双向)连接终止 */
};

/* 基础包头信息 */
struct tagTWebBase
{
    uint8_t bMagic;                                   	/*   魔数 */
    uint32_t dwPkgLen;                                	/*   包长度，包括包头和包体长度 */
    uint32_t dwBodyLen;                               	/*   包体长度 */
    uint8_t bVersion;                                 	/*   协议版本,参考TWEB_VERSION */
    uint8_t bCmd;                                     	/*   包类型 */
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERDATA_TYPE,*/
    WEBUSERINFO2 stUser;                             
};

/* 包头 */
struct tagTWebHead
{
    TWEBBASE stBase;                                  	/*   基础信息 */
    TWEBEXT stExt;                                    	/*   扩展信息 */
};

/* WEB端通信包 */
struct tagTWebPkg
{
    TWEBHEAD stHead;                                 
    int8_t szBody[1];                                
};

/* Key-Value对 */
struct tagTKeyValue
{
    char szKey[TCONND_WAP_MAX_KEY_LENGTH];           
    char szValue[TCONND_WAP_MAX_VALUE_LENGTH];       
};

/* URI参数 */
struct tagTParams
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE astParams[TCONND_WAP_MAX_PARAMS_COUNT];
};

/* Header */
struct tagTHeaders
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE astHeaders[TCONND_WAP_MAX_HEADERS_COUNT];
};

/* Cookies */
struct tagTCookies
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE astCookies[TCONND_WAP_MAX_COOKIES_COUNT];
};

/* WAP通信上行包 */
struct tagTWapUpload
{
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERDATA_TYPE,*/
    WEBUSERINFO2 stUser;                             
    char szURI[TCONND_WAP_MAX_URI_LENGTH];           
    TPARAMS stParams;                                 	/*   Params */
    THEADERS stHeaders;                               	/*   Headers */
    TCOOKIES stCookies;                               	/*   Cookies */
};

/* WAP通信下行包 */
struct tagTWapDownload
{
    THEADERS stHeaders;                               	/*   Headers */
    char szBody[TCONND_WAP_MAX_BODY_LENGTH];          	/*   Body */
};

#pragma pack()


#endif /* TWEBDEF_H_ */
