/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* tdr version: 2.7.37 */

#ifndef TSF4G_TDR_TDR_TYPE_H_
#define TSF4G_TDR_TDR_TYPE_H_

#include "TdrPal.h"
#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrTime.h"

namespace tsf4g_tdr
{


class TdrTypeUtil
{
    public:
        static TdrError::ErrorType str2TdrIP(tdr_ip_t& dest, const char *pszIP);
        static TdrError::ErrorType str2TdrTime(tdr_time_t& dest, const char *pszTime);
        static TdrError::ErrorType str2TdrDate(tdr_date_t& dest, const char *pszDate);
        static TdrError::ErrorType str2TdrDateTime(tdr_datetime_t& dest, const char *pszDateTime);
        static TdrError::ErrorType UTC2TdrDateTime(tdr_datetime_t& dest, time_t utcTime);

        static TdrError::ErrorType tdrIp2Str(char* dest, size_t size, tdr_ip_t src);

        static TdrError::ErrorType tdrTime2Str(char* dest, size_t size, tdr_time_t src)
        {
            TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;
            int usedSize = 0;

            ret = TdrTime(src).print2Buf(dest, size, &usedSize);
            if (ret != TdrError::TDR_NO_ERROR)
            {
                return ret;
            }

            if (usedSize < 0 || usedSize >= (int)size)
            {
                ret = TdrError::TDR_ERR_SHORT_BUF_FOR_WRITE;
            }

            return ret;
        }

        static TdrError::ErrorType tdrDate2Str(char* dest, size_t size, tdr_date_t src)
        {
            TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;
            int usedSize = 0;

            ret = TdrDate(src).print2Buf(dest, size, &usedSize);
            if (ret != TdrError::TDR_NO_ERROR)
            {
                return ret;
            }

            if (usedSize < 0 || usedSize >= (int)size)
            {
                ret = TdrError::TDR_ERR_SHORT_BUF_FOR_WRITE;
            }

            return ret;
        }

        static TdrError::ErrorType tdrDateTime2Str(char* dest, size_t size, tdr_datetime_t src)
        {
            TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;
            int usedSize = 0;

            ret = TdrDateTime(src).print2Buf(dest, size, &usedSize);
            if (ret != TdrError::TDR_NO_ERROR)
            {
                return ret;
            }

            if (usedSize < 0 || usedSize >= (int)size)
            {
                ret = TdrError::TDR_ERR_SHORT_BUF_FOR_WRITE;
            }

            return ret;
        }

        static TdrError::ErrorType tdrIp2Str(TdrWriteBuf& dest, tdr_ip_t src);

        static TdrError::ErrorType tdrTime2Str(TdrWriteBuf& dest, tdr_time_t src)
        {
            return TdrTime(src).print2Buf(dest);
        }

        static TdrError::ErrorType tdrDate2Str(TdrWriteBuf& dest, tdr_date_t src)
        {
            return TdrDate(src).print2Buf(dest);
        }

        static TdrError::ErrorType tdrDateTime2Str(TdrWriteBuf& dest, tdr_datetime_t src)
        {
            return TdrDateTime(src).print2Buf(dest);
        }

        static TdrError::ErrorType tdrDateTime2UTC(time_t& dest, tdr_datetime_t src);

    public:
        static int compareTdrTime(tdr_time_t left, tdr_time_t right);
        static int compareTdrDate(tdr_date_t left, tdr_date_t right);
        static int compareTdrDateTime(tdr_datetime_t left, tdr_datetime_t right);

    public:
        static size_t wstrlen(const tdr_wchar_t* wstr);
};

}
#endif
